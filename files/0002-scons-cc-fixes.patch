diff --git a/SConstruct b/SConstruct
index 89c044ab..a6d02072 100644
--- a/SConstruct
+++ b/SConstruct
@@ -2513,7 +2513,6 @@ if env.TargetOSIs('posix'):
     # -Winvalid-pch Warn if a precompiled header (see Precompiled Headers) is found in the search path but can't be used.
 
     env.Append( CCFLAGS=["-fasynchronous-unwind-tables",
-                         "-ggdb" if not env.TargetOSIs('emscripten') else "-g",
                          "-Wall",
                          "-Wsign-compare",
                          "-Wno-unknown-pragmas",
@@ -2569,6 +2568,8 @@ if env.TargetOSIs('posix'):
 
     # env.Append( " -Wconversion" ) TODO: this doesn't really work yet
     env.Append( CXXFLAGS=["-Woverloaded-virtual"] )
+    env.Append( CXXFLAGS=os.environ['CXXFLAGS'] )
+    env.Append( LINKFLAGS=os.environ['LDFLAGS'] )
 
     # On OS X, clang doesn't want the pthread flag at link time, or it
     # issues warnings which make it impossible for us to declare link
@@ -3085,6 +3086,8 @@ if myenv.ToolchainIs('clang', 'gcc'):
  
         # Warn about moves of prvalues, which can inhibit copy elision.
         AddToCXXFLAGSIfSupported(myenv, "-Wpessimizing-move")
 
+        AddToCXXFLAGSIfSupported(myenv, "-Wno-redundant-move")
+
         # Disable warning about variables that may not be initialized
         # Failures are triggered in the case of boost::optional in GCC 4.8.x
         # TODO: re-evaluate when we move to GCC 5.3
@@ -3703,11 +3706,6 @@ def doConfigure(myenv):
 
 
     if myenv.ToolchainIs('gcc', 'clang'):
-        # Usually, --gdb-index is too expensive in big static binaries, but for dynamic
-        # builds it works well.
-        if link_model.startswith("dynamic"):
-            AddToLINKFLAGSIfSupported(myenv, '-Wl,--gdb-index')
-
         # Our build is already parallel.
         AddToLINKFLAGSIfSupported(myenv, '-Wl,--no-threads')
 
